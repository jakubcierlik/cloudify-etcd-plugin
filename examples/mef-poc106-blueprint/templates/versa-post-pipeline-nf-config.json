{
  "credentials": "{\n    \"NFConfig\": {\n\t\"Username\": \"admin\",\n\t\"Password\": \"versa123\",\n\t\"Key\": \"\",\n\t\"Port\": \"22\",\n\t\"_comment\": \"BootTime: Maximium time in seconds for NF to boot\",\n\t\"BootTime\": \"120\",\n\t\"Plugin\": \"mneme:flexvnf-plugin\",\n\t\"PluginArgs\": [\"--local-id\",\"SDWAN-Branch@Versa.com\",\"--local-key\",\"1234\",\"--remote-key\",\"1234\",\"--remote-id\",\"Controller-1-staging@Versa.com\", \"--controller-ip-address\", \"52.12.227.43\", \"--wan-port\", \"0\",\"--serial-number\", \"uCPE-A\", \"--wan-iface-address\", \"10.255.255.65/29\", \"--wan-gateway-address\", \"10.255.255.70\"]\n    },\n    \"NFProbe\": {\n\t\"Username\": \"admin\",\n\t\"Password\": \"versa123\",\n\t\"Key\": \"\",\n\t\"Port\": \"22\",\n\t\"Plugin\": \"mneme:flexvnf-plugin\"\n    },\n    \"NFLicense\": {\n\t\"Username\": \"pangolin\",\n\t\"Key\": \"\",\n\t\"Port\": \"22\",\n\t\"Plugin\": \"\"\n    }\n}\n",
  "configTemplate": "{}\n",
  "mapping": "",
  "filter": "#!/usr/bin/env python3\n\"\"\"\nfilter.py\n\"\"\"\n#\n# Copyright (C) 2017-2018 Nefeli Networks Inc. - All Rights Reserved\n# Proprietary and confidential.\n#\n# Notice: All information contained within is, and remains, the\n# property of Nefeli Networks Inc.  and its suppliers or authorized\n# agents, if any.  The intellectual and technical concepts contained\n# herein are proprietary to Nefeli Networks Inc. and may be covered by\n# U.S. and Foreign Patents, patents in process, and are protected by\n# trade secret or copyright law.  Redistribution of this information\n# or reproduction of this material is strictly forbidden unless prior\n# written permission is obtained from Nefeli Networks Inc.\n#\n# For information regarding licensing, contact info@nefeli.io\n#\n\n# pylint: disable=invalid-name\n\nimport argparse\nimport importlib\nimport os.path\nimport re\nimport sys\n\n\ndef main():\n    \"\"\"\n    Filter config file\n    cat config | filter.py --mapping mapping.py --total 3 --instance 0\n    \"\"\"\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--mapping\", required=True, help=\"File containing template susbstitute values\"\n    )\n    parser.add_argument(\"--total\", required=True, help=\"Total number of NF instance\")\n    parser.add_argument(\n        \"--instance\", required=True, help=\"Instance for which config is being generated\"\n    )\n    args = parser.parse_args()\n\n    # The mapping file is an absolute  path name.\n    # Import requires basename without .py extension\n\n    mapping = importlib.import_module(  # pylint: disable=possibly-unused-variable\n        os.path.basename(args.mapping)[:-3]\n    )\n    total = int(args.total) - 1  # pylint: disable=possibly-unused-variable\n    instance = int(args.instance)  # pylint: disable=possibly-unused-variable\n\n    prog = re.compile(\"%.*%\")\n    gs = globals()\n    ls = locals()\n\n    def replace(matchobj):\n        variable = matchobj.group(0)[1:-1]\n        command = \"mapping.{}[total][instance]\".format(variable)\n        variable = eval(command, gs, ls)  # pylint: disable=eval-used\n        return variable\n\n    for line in sys.stdin:\n        m = prog.sub(replace, line)\n        if m:\n            line = m\n        print(line, end=\"\")\n\n    sys.exit(0)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "rollback": "{\n    \"Rollback\": {\n\t\"_comment\": \"On config failure just signal failure to pangolin\",\n\t\"Policy\": \"reboot\"\n    }\n}\n"
}
